{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { API_URL } from \"../../API_URL\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlightService {\n  constructor(http) {\n    this.http = http;\n  }\n  searchCodeForCity(code) {\n    return this.http.get(API_URL + '/city-and-airport-search/' + code);\n  }\n  showAvailableFlights(form) {\n    const dateOfReturn = form.get('dateOfReturn')?.value;\n    let params = new HttpParams();\n    params = params.append('originCode', form.get('origin')?.value);\n    params = params.append('destinationCode', form.get('destination')?.value);\n    params = params.append('dateOfDeparture', form.get('dateOfDeparture')?.value);\n    if (dateOfReturn !== 'Invalid date' || dateOfReturn !== '') {\n      params = params.append('dateOfReturn', form.get('dateOfReturn')?.value);\n    }\n    params = params.append('adults', form.get('adults')?.value);\n    params = params.append('max', 7);\n    return this.http.get(API_URL + '/flight-search', {\n      params: params\n    });\n  }\n  static #_ = this.ɵfac = function FlightService_Factory(t) {\n    return new (t || FlightService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FlightService,\n    factory: FlightService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","API_URL","FlightService","constructor","http","searchCodeForCity","code","get","showAvailableFlights","form","dateOfReturn","value","params","append","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Projekty\\lot-flight-browser\\frontend\\src\\app\\services\\flight\\flight.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {API_URL} from \"../../API_URL\";\nimport {FormGroup} from \"@angular/forms\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FlightService {\n  constructor(private http: HttpClient) { }\n\n  searchCodeForCity(code: string){\n    return this.http.get(API_URL+'/city-and-airport-search/'+code)\n  }\n\n  showAvailableFlights(form: FormGroup){\n    const dateOfReturn = form.get('dateOfReturn')?.value\n    let params = new HttpParams();\n    params = params.append('originCode',form.get('origin')?.value);\n    params = params.append('destinationCode',form.get('destination')?.value);\n    params = params.append('dateOfDeparture',form.get('dateOfDeparture')?.value);\n    if(dateOfReturn !== 'Invalid date' || dateOfReturn !== ''){\n      params = params.append('dateOfReturn',form.get('dateOfReturn')?.value);\n    }\n    params = params.append('adults',form.get('adults')?.value);\n    params = params.append('max',7);\n    return this.http.get(API_URL+'/flight-search',{\n      params: params\n    });\n  }\n}\n"],"mappings":"AACA,SAAoBA,UAAU,QAAO,sBAAsB;AAC3D,SAAQC,OAAO,QAAO,eAAe;;;AAMrC,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,iBAAiBA,CAACC,IAAY;IAC5B,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAACN,OAAO,GAAC,2BAA2B,GAACK,IAAI,CAAC;EAChE;EAEAE,oBAAoBA,CAACC,IAAe;IAClC,MAAMC,YAAY,GAAGD,IAAI,CAACF,GAAG,CAAC,cAAc,CAAC,EAAEI,KAAK;IACpD,IAAIC,MAAM,GAAG,IAAIZ,UAAU,EAAE;IAC7BY,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,YAAY,EAACJ,IAAI,CAACF,GAAG,CAAC,QAAQ,CAAC,EAAEI,KAAK,CAAC;IAC9DC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,iBAAiB,EAACJ,IAAI,CAACF,GAAG,CAAC,aAAa,CAAC,EAAEI,KAAK,CAAC;IACxEC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,iBAAiB,EAACJ,IAAI,CAACF,GAAG,CAAC,iBAAiB,CAAC,EAAEI,KAAK,CAAC;IAC5E,IAAGD,YAAY,KAAK,cAAc,IAAIA,YAAY,KAAK,EAAE,EAAC;MACxDE,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,cAAc,EAACJ,IAAI,CAACF,GAAG,CAAC,cAAc,CAAC,EAAEI,KAAK,CAAC;IACxE;IACAC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,QAAQ,EAACJ,IAAI,CAACF,GAAG,CAAC,QAAQ,CAAC,EAAEI,KAAK,CAAC;IAC1DC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;IAC/B,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAACN,OAAO,GAAC,gBAAgB,EAAC;MAC5CW,MAAM,EAAEA;KACT,CAAC;EACJ;EAAC,QAAAE,CAAA,G;qBArBUZ,aAAa,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbjB,aAAa;IAAAkB,OAAA,EAAblB,aAAa,CAAAmB,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}