{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { MatFormField, MatFormFieldModule, MatHint, MatLabel } from \"@angular/material/form-field\";\nimport { MatInput } from \"@angular/material/input\";\nimport { MatDatepicker, MatDatepickerInput, MatDatepickerToggle, MatStartDate } from \"@angular/material/datepicker\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { provideMomentDateAdapter } from \"@angular/material-moment-adapter\";\nimport * as moment from 'moment';\nimport { MatButton } from \"@angular/material/button\";\nexport const MY_FORMATS = {\n  parse: {\n    dateInput: 'yyyy-MM-dd'\n  },\n  display: {\n    dateInput: 'yyyy-MM-DD',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\nlet BrowserFormComponent = class BrowserFormComponent {\n  constructor(fb, fs) {\n    this.fb = fb;\n    this.fs = fs;\n    this.flightsSender = new EventEmitter();\n    this.locationsSender = new EventEmitter();\n    this.submitStatus = new EventEmitter();\n    this.locations = [];\n    this.minDate = new Date();\n    this.minReturnDate = new Date();\n    this.flightForm = this.fb.group({\n      origin: ['', Validators.required],\n      destination: ['', Validators.required],\n      adults: [1, [Validators.required, Validators.min(1), Validators.max(10)]],\n      dateOfDeparture: [this.minDate, Validators.required],\n      dateOfReturn: ''\n    });\n  }\n  onSubmit(formDirective) {\n    const originValue = this.flightForm.get('origin').value;\n    const destination = this.flightForm.get('destination').value;\n    const returnDate = this.flightForm.get('dateOfReturn');\n    this.setFormattedData('dateOfDeparture');\n    returnDate?.value !== '' ? this.setFormattedData('dateOfReturn') : returnDate?.setValue('');\n    console.log(this.flightForm.valid);\n    this.flightForm.valid ? this.submitStatus.emit(true) : this.submitStatus.emit(false);\n    console.log(this.flightForm.value);\n    if (originValue && destination) {\n      this.locations[0] = originValue;\n      this.locations[1] = destination;\n      this.locationsSender.emit(this.locations);\n      this.fs.searchCodeForCity(originValue).subscribe(res => {\n        this.flightForm.get('origin')?.setValue(res.data[0].address.cityCode);\n        console.log(this.flightForm.get('origin')?.value);\n        this.fs.searchCodeForCity(destination).subscribe(res => {\n          this.flightForm.get('destination')?.setValue(res.data[0].address.cityCode);\n          console.log(this.flightForm.get('destination')?.value);\n          this.fs.showAvailableFlights(this.flightForm).subscribe(res => {\n            this.availableFlights = res.data;\n            console.log(res);\n            console.log(this.availableFlights);\n            this.flightsSender.emit(this.availableFlights);\n            this.flightForm.reset({}, {\n              emitEvent: false\n            });\n            formDirective.resetForm();\n            returnDate?.setValue('');\n          });\n        });\n      });\n    }\n  }\n  onSetDepartureDate() {\n    const minDate = new Date(moment(this.flightForm.get('dateOfDeparture').value).format('YYYY-MM-DD'));\n    this.minReturnDate = new Date(minDate.setDate(minDate.getDate()));\n  }\n  setFormattedData(selector) {\n    const date = moment(this.flightForm.get(selector).value);\n    const formattedDate = date.format('YYYY-MM-DD');\n    return this.flightForm.get(selector)?.setValue(formattedDate);\n  }\n};\n__decorate([Output()], BrowserFormComponent.prototype, \"flightsSender\", void 0);\n__decorate([Output()], BrowserFormComponent.prototype, \"locationsSender\", void 0);\n__decorate([Output()], BrowserFormComponent.prototype, \"submitStatus\", void 0);\nBrowserFormComponent = __decorate([Component({\n  selector: 'app-browser-form',\n  standalone: true,\n  imports: [ReactiveFormsModule, MatLabel, MatFormField, MatInput, MatDatepicker, MatFormFieldModule, MatDatepickerInput, MatNativeDateModule, MatHint, MatDatepickerToggle, MatStartDate, MatButton],\n  providers: [provideMomentDateAdapter(MY_FORMATS)],\n  templateUrl: './browser-form.component.html',\n  styleUrls: ['./browser-form.component.scss']\n})], BrowserFormComponent);\nexport { BrowserFormComponent };","map":{"version":3,"names":["Component","EventEmitter","Output","ReactiveFormsModule","Validators","MatFormField","MatFormFieldModule","MatHint","MatLabel","MatInput","MatDatepicker","MatDatepickerInput","MatDatepickerToggle","MatStartDate","MatNativeDateModule","provideMomentDateAdapter","moment","MatButton","MY_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","BrowserFormComponent","constructor","fb","fs","flightsSender","locationsSender","submitStatus","locations","minDate","Date","minReturnDate","flightForm","group","origin","required","destination","adults","min","max","dateOfDeparture","dateOfReturn","onSubmit","formDirective","originValue","get","value","returnDate","setFormattedData","setValue","console","log","valid","emit","searchCodeForCity","subscribe","res","data","address","cityCode","showAvailableFlights","availableFlights","reset","emitEvent","resetForm","onSetDepartureDate","format","setDate","getDate","selector","date","formattedDate","__decorate","standalone","imports","providers","templateUrl","styleUrls"],"sources":["D:\\Projekty\\lot-flight-browser\\frontend\\src\\app\\components\\browser-form\\browser-form.component.ts"],"sourcesContent":["import {Component, EventEmitter, Output} from '@angular/core';\nimport {FormBuilder, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {FlightService} from \"../../services/flight/flight.service\";\nimport {MatFormField, MatFormFieldModule, MatHint, MatLabel} from \"@angular/material/form-field\";\nimport {MatInput} from \"@angular/material/input\";\nimport {MatDatepicker, MatDatepickerInput, MatDatepickerToggle, MatStartDate} from \"@angular/material/datepicker\";\nimport {MatNativeDateModule} from \"@angular/material/core\";\nimport {provideMomentDateAdapter} from \"@angular/material-moment-adapter\";\nimport * as moment from 'moment';\nimport {MatButton} from \"@angular/material/button\";\nexport const MY_FORMATS = {\n  parse: {\n    dateInput: 'yyyy-MM-dd',\n  },\n  display: {\n    dateInput: 'yyyy-MM-DD',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n@Component({\n  selector: 'app-browser-form',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    MatLabel,\n    MatFormField,\n    MatInput,\n    MatDatepicker,\n    MatFormFieldModule,\n    MatDatepickerInput,\n    MatNativeDateModule,\n    MatHint,\n    MatDatepickerToggle,\n    MatStartDate,\n    MatButton\n  ],\n  providers:[\n    provideMomentDateAdapter(MY_FORMATS)\n  ],\n  templateUrl: './browser-form.component.html',\n  styleUrls: ['./browser-form.component.scss']\n})\nexport class BrowserFormComponent {\n  @Output() flightsSender: EventEmitter<Array<any>> = new EventEmitter();\n  @Output() locationsSender: EventEmitter<string[]> = new EventEmitter();\n  @Output() submitStatus: EventEmitter<boolean> = new EventEmitter();\n  availableFlights!:Array<any>;\n  locations:string[] = [];\n  flightForm!: FormGroup;\n  minDate = new Date();\n  minReturnDate = new Date();\n  constructor(private fb: FormBuilder,\n              private fs: FlightService) {\n    this.flightForm = this.fb.group({\n      origin: ['', Validators.required],\n      destination: ['', Validators.required],\n      adults: [1, [Validators.required,Validators.min(1),Validators.max(10)]],\n      dateOfDeparture: [this.minDate, Validators.required],\n      dateOfReturn: '',\n    });\n  }\n\n  onSubmit(formDirective: { resetForm: () => void; }){\n    const originValue = this.flightForm.get('origin')!.value;\n    const destination = this.flightForm.get('destination')!.value;\n    const returnDate = this.flightForm.get('dateOfReturn');\n    this.setFormattedData('dateOfDeparture');\n    returnDate?.value !== '' ? this.setFormattedData('dateOfReturn'): returnDate?.setValue('');\n    console.log(this.flightForm.valid);\n    this.flightForm.valid ? this.submitStatus.emit(true) : this.submitStatus.emit(false);\n    console.log(this.flightForm.value);\n   if (originValue && destination){\n     this.locations[0] = originValue;\n     this.locations[1] = destination;\n     this.locationsSender.emit(this.locations);\n     this.fs.searchCodeForCity(originValue).subscribe((res: any)=>{\n       this.flightForm.get('origin')?.setValue(res.data[0].address.cityCode)\n       console.log(this.flightForm.get('origin')?.value);\n\n       this.fs.searchCodeForCity(destination).subscribe((res: any)=>{\n         this.flightForm.get('destination')?.setValue(res.data[0].address.cityCode)\n         console.log(this.flightForm.get('destination')?.value);\n\n         this.fs.showAvailableFlights(this.flightForm).subscribe((res: any)=>{\n           this.availableFlights = res.data;\n           console.log(res)\n           console.log(this.availableFlights);\n           this.flightsSender.emit(this.availableFlights);\n           this.flightForm.reset({},{emitEvent: false});\n           formDirective.resetForm();\n           returnDate?.setValue('')\n         })\n       });\n     });\n   }\n  }\n\n  onSetDepartureDate() {\n    const minDate = new Date(moment(this.flightForm.get('dateOfDeparture')!.value).format('YYYY-MM-DD'));\n    this.minReturnDate = new Date(minDate.setDate(minDate.getDate()));\n  }\n\n\n  private setFormattedData(selector:string) {\n    const date: moment.Moment = moment(this.flightForm.get(selector)!.value);\n    const formattedDate: string = date.format('YYYY-MM-DD');\n    return this.flightForm.get(selector)?.setValue(formattedDate);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}